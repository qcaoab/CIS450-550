{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"processing","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO1s5AHT2cOvXuHtiZo/qeE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"1yEvrpJXMKdo","colab_type":"code","outputId":"522d3182-5a62-44a5-b1d5-b8cee1483865","executionInfo":{"status":"ok","timestamp":1586546583129,"user_tz":360,"elapsed":694,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AItR8r5JVqGR","colab_type":"code","colab":{}},"source":["import json\n","import numpy as np\n","import pandas as pd"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uv6woW4hyO9l","colab_type":"code","colab":{}},"source":["def preprocess(df):\n","  threshold=0.3\n","  df.replace([\"\", 'NaN'], np.nan, inplace = True)\n","  #remove columns with too many nan\n","  df=df[df.columns[df.isnull().mean()<threshold]]\n","  #fill nan with mode\n","  for col in df:\n","    df[col] = df[col].fillna(df[col].mode())\n","  #numerical outliers\n","  for col in df.select_dtypes([np.number]):\n","    print('working')\n","    Q1 = col.quantile(0.02)\n","    Q3 = col.quantile(0.98)\n","    IQR = Q3 - Q1\n","    df= df[~((col< (Q1 - 1.5 * IQR)) |(col> (Q3 + 1.5 * IQR))).any(axis=1)]\n","  #all 0 columns\n","  df = df[(df.T != 0).any()]\n","  df=pd.DataFrame(df)\n","  return df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rctbiW9oVHoA","colab_type":"code","outputId":"9878f0d2-9554-4d63-f794-31dbcb217024","executionInfo":{"status":"ok","timestamp":1586536014085,"user_tz":360,"elapsed":29417,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["author=[]\n","with open ('/content/drive/My Drive/good_reads/goodreads_book_authors.json/goodreads_book_authors.json') as f:\n","  for line in f:\n","    author.append(json.loads(line))\n","author=pd.DataFrame(author)    \n","author.head()\n"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>average_rating</th>\n","      <th>author_id</th>\n","      <th>text_reviews_count</th>\n","      <th>name</th>\n","      <th>ratings_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.98</td>\n","      <td>604031</td>\n","      <td>7</td>\n","      <td>Ronald J. Fields</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.08</td>\n","      <td>626222</td>\n","      <td>28716</td>\n","      <td>Anita Diamant</td>\n","      <td>546796</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.92</td>\n","      <td>10333</td>\n","      <td>5075</td>\n","      <td>Barbara Hambly</td>\n","      <td>122118</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.68</td>\n","      <td>9212</td>\n","      <td>36262</td>\n","      <td>Jennifer Weiner</td>\n","      <td>888522</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.82</td>\n","      <td>149918</td>\n","      <td>96</td>\n","      <td>Nigel Pennick</td>\n","      <td>1740</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  average_rating author_id text_reviews_count              name ratings_count\n","0           3.98    604031                  7  Ronald J. Fields            49\n","1           4.08    626222              28716     Anita Diamant        546796\n","2           3.92     10333               5075    Barbara Hambly        122118\n","3           3.68      9212              36262   Jennifer Weiner        888522\n","4           3.82    149918                 96     Nigel Pennick          1740"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"8PXzFhWd1GNf","colab_type":"code","colab":{}},"source":["author=preprocess(author)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"d3E9CaReT_WP","colab_type":"code","colab":{}},"source":["author.to_csv('/content/drive/My Drive/good_reads/author.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZWdpG-FQ2i8q","colab_type":"code","outputId":"e915e26a-cd40-4544-e281-1bc477acd075","executionInfo":{"status":"ok","timestamp":1586536057722,"user_tz":360,"elapsed":73043,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["author.head()"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>average_rating</th>\n","      <th>author_id</th>\n","      <th>text_reviews_count</th>\n","      <th>name</th>\n","      <th>ratings_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.98</td>\n","      <td>604031</td>\n","      <td>7</td>\n","      <td>Ronald J. Fields</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.08</td>\n","      <td>626222</td>\n","      <td>28716</td>\n","      <td>Anita Diamant</td>\n","      <td>546796</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.92</td>\n","      <td>10333</td>\n","      <td>5075</td>\n","      <td>Barbara Hambly</td>\n","      <td>122118</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.68</td>\n","      <td>9212</td>\n","      <td>36262</td>\n","      <td>Jennifer Weiner</td>\n","      <td>888522</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.82</td>\n","      <td>149918</td>\n","      <td>96</td>\n","      <td>Nigel Pennick</td>\n","      <td>1740</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  average_rating author_id text_reviews_count              name ratings_count\n","0           3.98    604031                  7  Ronald J. Fields            49\n","1           4.08    626222              28716     Anita Diamant        546796\n","2           3.92     10333               5075    Barbara Hambly        122118\n","3           3.68      9212              36262   Jennifer Weiner        888522\n","4           3.82    149918                 96     Nigel Pennick          1740"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"lpOt8EjE2qjg","colab_type":"code","outputId":"f75312cd-ba6c-4d7d-80eb-7cb00067684b","executionInfo":{"status":"ok","timestamp":1586536061288,"user_tz":360,"elapsed":76602,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}},"colab":{"base_uri":"https://localhost:8080/","height":171}},"source":["author.describe()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>average_rating</th>\n","      <th>author_id</th>\n","      <th>text_reviews_count</th>\n","      <th>name</th>\n","      <th>ratings_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>829529</td>\n","      <td>829529</td>\n","      <td>829529</td>\n","      <td>829524</td>\n","      <td>829529</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>377</td>\n","      <td>829529</td>\n","      <td>6241</td>\n","      <td>825850</td>\n","      <td>19686</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>4.00</td>\n","      <td>5442693</td>\n","      <td>1</td>\n","      <td>Phil Noto</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>52411</td>\n","      <td>1</td>\n","      <td>158106</td>\n","      <td>22</td>\n","      <td>43799</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       average_rating author_id text_reviews_count       name ratings_count\n","count          829529    829529             829529     829524        829529\n","unique            377    829529               6241     825850         19686\n","top              4.00   5442693                  1  Phil Noto             1\n","freq            52411         1             158106         22         43799"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"LWiYRPDSc6RD","colab_type":"code","outputId":"c8997f92-9950-4ae1-e9a5-5aab7893ba90","executionInfo":{"status":"ok","timestamp":1586536075751,"user_tz":360,"elapsed":91059,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["genres=[]\n","with open ('/content/drive/My Drive/good_reads/goodreads_book_genres_initial.json/goodreads_book_genres_initial.json') as f:\n","  for line in f:\n","    genres.append(json.loads(line))\n","genres=pd.DataFrame(genres)    \n","genres.head()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>book_id</th>\n","      <th>genres</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5333265</td>\n","      <td>{'history, historical fiction, biography': 1}</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1333909</td>\n","      <td>{'fiction': 219, 'history, historical fiction,...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7327624</td>\n","      <td>{'fantasy, paranormal': 31, 'fiction': 8, 'mys...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6066819</td>\n","      <td>{'fiction': 555, 'romance': 23, 'mystery, thri...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>287140</td>\n","      <td>{'non-fiction': 3}</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   book_id                                             genres\n","0  5333265      {'history, historical fiction, biography': 1}\n","1  1333909  {'fiction': 219, 'history, historical fiction,...\n","2  7327624  {'fantasy, paranormal': 31, 'fiction': 8, 'mys...\n","3  6066819  {'fiction': 555, 'romance': 23, 'mystery, thri...\n","4   287140                                 {'non-fiction': 3}"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"APUGbyDMAIWM","colab_type":"code","colab":{}},"source":["genres=preprocess(genres)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MywwUgM8l0gN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":341},"outputId":"3f043d43-6f89-40e2-97d6-afc3ae609f84","executionInfo":{"status":"ok","timestamp":1586540226692,"user_tz":360,"elapsed":5736,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["series=[]\n","with open ('/content/drive/My Drive/good_reads/goodreads_book_series.json/goodreads_book_series.json') as f:\n","  for line in f:\n","    series.append(json.loads(line))\n","series=pd.DataFrame(series)    \n","series.head()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>numbered</th>\n","      <th>note</th>\n","      <th>description</th>\n","      <th>title</th>\n","      <th>series_works_count</th>\n","      <th>series_id</th>\n","      <th>primary_work_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>true</td>\n","      <td></td>\n","      <td></td>\n","      <td>Sun Wolf and Starhawk</td>\n","      <td>9</td>\n","      <td>189911</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>true</td>\n","      <td></td>\n","      <td>This series is also known as * Avalon : Jalina...</td>\n","      <td>Avalon: Web of Magic</td>\n","      <td>14</td>\n","      <td>151854</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>true</td>\n","      <td></td>\n","      <td>Plot-wise, \"Crowner's Crusade\" is a prequel to...</td>\n","      <td>Crowner John Mystery</td>\n","      <td>15</td>\n","      <td>169353</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>true</td>\n","      <td></td>\n","      <td></td>\n","      <td>Pluto's Snitch</td>\n","      <td>3</td>\n","      <td>1052227</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>false</td>\n","      <td></td>\n","      <td></td>\n","      <td>The Way, With The Enchanted Neighborhood</td>\n","      <td>3</td>\n","      <td>1070125</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  numbered note  ... series_id primary_work_count\n","0     true       ...    189911                  3\n","1     true       ...    151854                 12\n","2     true       ...    169353                 15\n","3     true       ...   1052227                  3\n","4    false       ...   1070125                  3\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"AG-XZ0SYAMxU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":141},"outputId":"8dc8846e-8346-4aab-bdde-a987411a81a5","executionInfo":{"status":"ok","timestamp":1586540246151,"user_tz":360,"elapsed":25143,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["series=preprocess(series)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"IAZl_hpqULoL","colab_type":"code","colab":{}},"source":["series.to_csv('/content/drive/My Drive/good_reads/series.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5xL9JljEmhN0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"outputId":"f7f6e00f-9826-4853-9f82-83f536f466a5","executionInfo":{"status":"ok","timestamp":1586540248407,"user_tz":360,"elapsed":27356,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["series.describe()\n","series.isnull().sum(axis=0)"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numbered              0\n","title                 6\n","series_works_count    0\n","series_id             0\n","primary_work_count    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"40VnFGMUwpYv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":309},"outputId":"0614906a-0c6d-4421-a367-c3b92a59f440","executionInfo":{"status":"ok","timestamp":1586540278715,"user_tz":360,"elapsed":57641,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["works=[]\n","with open ('/content/drive/My Drive/good_reads/goodreads_book_works.json/goodreads_book_works.json') as f:\n","  for line in f:\n","    works.append(json.loads(line))\n","works=pd.DataFrame(works)    \n","works.head()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>books_count</th>\n","      <th>reviews_count</th>\n","      <th>original_publication_month</th>\n","      <th>default_description_language_code</th>\n","      <th>text_reviews_count</th>\n","      <th>best_book_id</th>\n","      <th>original_publication_year</th>\n","      <th>original_title</th>\n","      <th>rating_dist</th>\n","      <th>default_chaptering_book_id</th>\n","      <th>original_publication_day</th>\n","      <th>original_language_id</th>\n","      <th>ratings_count</th>\n","      <th>media_type</th>\n","      <th>ratings_sum</th>\n","      <th>work_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td></td>\n","      <td>1</td>\n","      <td>5333265</td>\n","      <td>1984</td>\n","      <td>W. C. Fields: A Life on Film</td>\n","      <td>5:1|4:1|3:1|2:0|1:0|total:3</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td>3</td>\n","      <td>book</td>\n","      <td>12</td>\n","      <td>5400751</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>22</td>\n","      <td>10162</td>\n","      <td></td>\n","      <td></td>\n","      <td>741</td>\n","      <td>25717</td>\n","      <td>2001</td>\n","      <td>Good Harbor</td>\n","      <td>5:517|4:1787|3:2763|2:966|1:196|total:6229</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td>6229</td>\n","      <td>book</td>\n","      <td>20150</td>\n","      <td>1323437</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>268</td>\n","      <td></td>\n","      <td></td>\n","      <td>7</td>\n","      <td>7327624</td>\n","      <td>1987</td>\n","      <td></td>\n","      <td>5:49|4:58|3:26|2:5|1:3|total:141</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td>141</td>\n","      <td>book</td>\n","      <td>568</td>\n","      <td>8948723</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>38</td>\n","      <td>89252</td>\n","      <td>7</td>\n","      <td></td>\n","      <td>3504</td>\n","      <td>6066819</td>\n","      <td>2009</td>\n","      <td>Best Friends Forever</td>\n","      <td>5:9152|4:16855|3:19507|2:6210|1:1549|total:53273</td>\n","      <td></td>\n","      <td>14</td>\n","      <td></td>\n","      <td>53273</td>\n","      <td>book</td>\n","      <td>185670</td>\n","      <td>6243154</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>49</td>\n","      <td></td>\n","      <td></td>\n","      <td>5</td>\n","      <td>287140</td>\n","      <td>1990</td>\n","      <td>Runic Astrology: Starcraft and Timekeeping in ...</td>\n","      <td>5:6|4:1|3:3|2:3|1:2|total:15</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td>15</td>\n","      <td>book</td>\n","      <td>51</td>\n","      <td>278577</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  books_count reviews_count  ... ratings_sum  work_id\n","0           1             6  ...          12  5400751\n","1          22         10162  ...       20150  1323437\n","2           2           268  ...         568  8948723\n","3          38         89252  ...      185670  6243154\n","4           2            49  ...          51   278577\n","\n","[5 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"A8EBN-Ohw377","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":309},"outputId":"583f7814-55b6-444b-ffc3-271e9433cb0a","executionInfo":{"status":"ok","timestamp":1586540290583,"user_tz":360,"elapsed":69488,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["works.describe()\n","\n","works.head()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>books_count</th>\n","      <th>reviews_count</th>\n","      <th>original_publication_month</th>\n","      <th>default_description_language_code</th>\n","      <th>text_reviews_count</th>\n","      <th>best_book_id</th>\n","      <th>original_publication_year</th>\n","      <th>original_title</th>\n","      <th>rating_dist</th>\n","      <th>default_chaptering_book_id</th>\n","      <th>original_publication_day</th>\n","      <th>original_language_id</th>\n","      <th>ratings_count</th>\n","      <th>media_type</th>\n","      <th>ratings_sum</th>\n","      <th>work_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td></td>\n","      <td>1</td>\n","      <td>5333265</td>\n","      <td>1984</td>\n","      <td>W. C. Fields: A Life on Film</td>\n","      <td>5:1|4:1|3:1|2:0|1:0|total:3</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td>3</td>\n","      <td>book</td>\n","      <td>12</td>\n","      <td>5400751</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>22</td>\n","      <td>10162</td>\n","      <td></td>\n","      <td></td>\n","      <td>741</td>\n","      <td>25717</td>\n","      <td>2001</td>\n","      <td>Good Harbor</td>\n","      <td>5:517|4:1787|3:2763|2:966|1:196|total:6229</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td>6229</td>\n","      <td>book</td>\n","      <td>20150</td>\n","      <td>1323437</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>268</td>\n","      <td></td>\n","      <td></td>\n","      <td>7</td>\n","      <td>7327624</td>\n","      <td>1987</td>\n","      <td></td>\n","      <td>5:49|4:58|3:26|2:5|1:3|total:141</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td>141</td>\n","      <td>book</td>\n","      <td>568</td>\n","      <td>8948723</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>38</td>\n","      <td>89252</td>\n","      <td>7</td>\n","      <td></td>\n","      <td>3504</td>\n","      <td>6066819</td>\n","      <td>2009</td>\n","      <td>Best Friends Forever</td>\n","      <td>5:9152|4:16855|3:19507|2:6210|1:1549|total:53273</td>\n","      <td></td>\n","      <td>14</td>\n","      <td></td>\n","      <td>53273</td>\n","      <td>book</td>\n","      <td>185670</td>\n","      <td>6243154</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>49</td>\n","      <td></td>\n","      <td></td>\n","      <td>5</td>\n","      <td>287140</td>\n","      <td>1990</td>\n","      <td>Runic Astrology: Starcraft and Timekeeping in ...</td>\n","      <td>5:6|4:1|3:3|2:3|1:2|total:15</td>\n","      <td></td>\n","      <td></td>\n","      <td></td>\n","      <td>15</td>\n","      <td>book</td>\n","      <td>51</td>\n","      <td>278577</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  books_count reviews_count  ... ratings_sum  work_id\n","0           1             6  ...          12  5400751\n","1          22         10162  ...       20150  1323437\n","2           2           268  ...         568  8948723\n","3          38         89252  ...      185670  6243154\n","4           2            49  ...          51   278577\n","\n","[5 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"tbmHrkmk8GC9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":312},"outputId":"b18ba4a2-7771-4e0d-efb0-c97aeb953c67","executionInfo":{"status":"ok","timestamp":1586540292540,"user_tz":360,"elapsed":71428,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["works.isnull().sum(axis=0)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["books_count                          0\n","reviews_count                        0\n","original_publication_month           0\n","default_description_language_code    0\n","text_reviews_count                   0\n","best_book_id                         0\n","original_publication_year            0\n","original_title                       0\n","rating_dist                          0\n","default_chaptering_book_id           0\n","original_publication_day             0\n","original_language_id                 0\n","ratings_count                        0\n","media_type                           0\n","ratings_sum                          0\n","work_id                              0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"jc3s6wQ233mg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":141},"outputId":"9dc42a38-ba29-4a00-bcbc-c2d409fef3ab","executionInfo":{"status":"ok","timestamp":1586540380965,"user_tz":360,"elapsed":159836,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["works=preprocess(works)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"DrL-TmE2UQJa","colab_type":"code","colab":{}},"source":["works.to_csv('/content/drive/My Drive/good_reads/works.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"57PIeyvv38LX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":222},"outputId":"e1a7f05f-f3c2-4df8-da58-aaf27c65f4de","executionInfo":{"status":"ok","timestamp":1586540387080,"user_tz":360,"elapsed":165918,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["works.head()"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>books_count</th>\n","      <th>reviews_count</th>\n","      <th>text_reviews_count</th>\n","      <th>best_book_id</th>\n","      <th>original_publication_year</th>\n","      <th>rating_dist</th>\n","      <th>ratings_count</th>\n","      <th>media_type</th>\n","      <th>ratings_sum</th>\n","      <th>work_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>5333265</td>\n","      <td>1984</td>\n","      <td>5:1|4:1|3:1|2:0|1:0|total:3</td>\n","      <td>3</td>\n","      <td>book</td>\n","      <td>12</td>\n","      <td>5400751</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>22</td>\n","      <td>10162</td>\n","      <td>741</td>\n","      <td>25717</td>\n","      <td>2001</td>\n","      <td>5:517|4:1787|3:2763|2:966|1:196|total:6229</td>\n","      <td>6229</td>\n","      <td>book</td>\n","      <td>20150</td>\n","      <td>1323437</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>268</td>\n","      <td>7</td>\n","      <td>7327624</td>\n","      <td>1987</td>\n","      <td>5:49|4:58|3:26|2:5|1:3|total:141</td>\n","      <td>141</td>\n","      <td>book</td>\n","      <td>568</td>\n","      <td>8948723</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>38</td>\n","      <td>89252</td>\n","      <td>3504</td>\n","      <td>6066819</td>\n","      <td>2009</td>\n","      <td>5:9152|4:16855|3:19507|2:6210|1:1549|total:53273</td>\n","      <td>53273</td>\n","      <td>book</td>\n","      <td>185670</td>\n","      <td>6243154</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>49</td>\n","      <td>5</td>\n","      <td>287140</td>\n","      <td>1990</td>\n","      <td>5:6|4:1|3:3|2:3|1:2|total:15</td>\n","      <td>15</td>\n","      <td>book</td>\n","      <td>51</td>\n","      <td>278577</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  books_count reviews_count text_reviews_count  ... media_type ratings_sum  work_id\n","0           1             6                  1  ...       book          12  5400751\n","1          22         10162                741  ...       book       20150  1323437\n","2           2           268                  7  ...       book         568  8948723\n","3          38         89252               3504  ...       book      185670  6243154\n","4           2            49                  5  ...       book          51   278577\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"e4NtR3W0w9OV","colab":{}},"source":["reviews=[]\n","with open ('/content/drive/My Drive/good_reads/goodreads_reviews_dedup.json/goodreads_reviews_dedup.json') as f:\n","  for line in f:\n","    reviews.append(json.loads(line))\n","reviews=pd.DataFrame(reviews)    \n","reviews.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_pn3s_QiASpQ","colab_type":"code","colab":{}},"source":["reviews=preprocessing(reviews)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UGqg6isFUTiS","colab_type":"code","colab":{}},"source":["review.to_csv('/content/drive/My Drive/good_reads/review.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ru0fo0vTxNsN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":381},"outputId":"f8267212-c9aa-4475-d1cb-0b8c625def91","executionInfo":{"status":"error","timestamp":1586551022395,"user_tz":360,"elapsed":35703,"user":{"displayName":"Qinglan Cao","photoUrl":"","userId":"15402540274071872416"}}},"source":["books=[]\n","with open ('/content/drive/My Drive/good_reads/goodreads_books.json') as f:\n","  for line in f:\n","    books.append(json.loads(line))\n","books=pd.DataFrame(books)    \n","books.head()"],"execution_count":6,"outputs":[{"output_type":"error","ename":"JSONDecodeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mJSONDecodeError\u001b[0m                           Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-e6465934fedc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/My Drive/good_reads/goodreads_books.json'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mbooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbooks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mbooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/json/__init__.py\u001b[0m in \u001b[0;36mloads\u001b[0;34m(s, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\u001b[0m\n\u001b[1;32m    352\u001b[0m             \u001b[0mparse_int\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mparse_float\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m             parse_constant is None and object_pairs_hook is None and not kw):\n\u001b[0;32m--> 354\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_default_decoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    355\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcls\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    356\u001b[0m         \u001b[0mcls\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mJSONDecoder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/json/decoder.py\u001b[0m in \u001b[0;36mdecode\u001b[0;34m(self, s, _w)\u001b[0m\n\u001b[1;32m    337\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m         \"\"\"\n\u001b[0;32m--> 339\u001b[0;31m         \u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_w\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    340\u001b[0m         \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_w\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/json/decoder.py\u001b[0m in \u001b[0;36mraw_decode\u001b[0;34m(self, s, idx)\u001b[0m\n\u001b[1;32m    353\u001b[0m         \"\"\"\n\u001b[1;32m    354\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 355\u001b[0;31m             \u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscan_once\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    356\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mJSONDecodeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Expecting value\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mJSONDecodeError\u001b[0m: Unterminated string starting at: line 1 column 346 (char 345)"]}]},{"cell_type":"code","metadata":{"id":"dJgMDtzNAWsX","colab_type":"code","colab":{}},"source":["books=preprocessing(books)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8R7vrrW7UZNa","colab_type":"code","colab":{}},"source":["books.to_csv('/content/drive/My Drive/good_reads/books.csv')"],"execution_count":0,"outputs":[]}]}